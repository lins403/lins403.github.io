{"version":3,"sources":["webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/hero.mdx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/list.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/components/project-list-item.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/components/listing.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/bottom.jsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/homepage.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx"],"names":["ItemTags","tags","useMinimalBlogConfig","tagsPath","basePath","Fragment","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","List","children","sx","mb","ul","margin","padding","li","listStyle","a","variant","Text","props","console","warn","layoutProps","_frontmatter","MDXContent","components","mdxType","fontSize","fontWeight","color","isMDXComponent","ProjectListItem","project","href","url","mt","updatedAt","replace","primaryLanguage","Listing","projects","node","id","edges","useStaticQuery","github","viewer","repositories","text","target","style","Homepage","posts","blogPath","siteTitle","useSiteMetadata","visuallyHidden","p","showTags","HomepageComponent","allPost","data","nodes","BlogListItem","post","title","date","className"],"mappings":"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","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-629de9cff961df702959.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Text = makeShortcode(\"Text\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Text sx={{\n      fontSize: [4, 5, 6],\n      fontWeight: `bold`,\n      color: `heading`\n    }} mdxType=\"Text\">\n  Hi.\n    </Text>\n    <p>{`Hello World!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx } from \"theme-ui\"\n\ntype ListProps = {\n  children: React.ReactNode\n}\n\nconst List = ({ children }: ListProps) => (\n  <section\n    sx={{\n      mb: [5, 5, 6],\n      ul: { margin: 0, padding: 0 },\n      li: { listStyle: `none`, mb: 3 },\n      a: { variant: `links.listItem` },\n    }}\n  >\n    {children}\n  </section>\n)\n\nexport default List\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\n\ntype ProjectListItemProps = {\n  project: {\n    id: string\n    name: string\n    url: string\n    updatedAt: string\n    description: string\n    forkCount: string\n    primaryLanguage?: {\n      name: string\n    }\n  }\n  showTags?: boolean\n}\n\nconst ProjectListItem = ({ project }: ProjectListItemProps) => (\n  <Box mb={4}>\n    <TLink href={project.url} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {project.name}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{project.updatedAt.replace(/(T.*)$/,'')}</time>\n      {project.primaryLanguage && project.primaryLanguage.name && (\n        <React.Fragment>\n          {` â€” `+ project.primaryLanguage.name }\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default ProjectListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport ProjectListItem from \"./project-list-item\"\n\ntype ListingProjects = {\n  projects:{\n    node: {\n        id: string\n        name: string\n        url: string\n        updatedAt: string\n        description: string\n        openGraphImageUrl: string\n        forkCount: number\n        primaryLanguage?: {\n          name: string\n        }\n        stargazers: {\n          totalCount: number\n        }\n      }\n  }[]\n}\n\nconst Listing = ({projects}: ListingProjects) => (\n  <section sx={{ mb: [5, 6, 7] }} >\n    {projects.map((project) => (\n      <ProjectListItem key={project.node.id} project={project.node} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","\nimport React from 'react'\nimport Title from \"@lekoarts/gatsby-theme-minimal-blog/src/components/title\"\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Listing from \"./components/listing\"\nimport { Link } from \"theme-ui\"\n\nexport default (props)=>{\n    const {\n        github: {\n          viewer: {\n            repositories: { edges }\n          }\n        }\n      } = useStaticQuery(\n        graphql`\n          {\n            github {\n                viewer {\n                  repositories(first: 4, orderBy: {field: PUSHED_AT, direction: DESC}) {\n                    edges {\n                      node {\n                        description\n                        forkCount\n                        id\n                        name\n                        openGraphImageUrl\n                        url\n                        primaryLanguage {\n                          name\n                        }\n                        stargazers {\n                          totalCount\n                        }\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n              }\n          }\n        `\n      );\n\n    return <React.Fragment>\n        <Title text=\"Projects\">\n            <Link href={`https://github.com/lins403`} target={`_blank`}\n             style={{fontSize: `1rem`, fontWeight: 400, color: `gray` }} >Github HomePage</Link>\n        </Title>\n            <Listing projects={edges} sx={{ mt: [4, 5] }} />\n    </React.Fragment>\n}","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport Title from \"./title\"\nimport Listing from \"./listing\"\nimport List from \"./list\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport { visuallyHidden } from \"../styles/utils\"\n// @ts-ignore\nimport Hero from \"../texts/hero\"\n// @ts-ignore\nimport Bottom from \"../texts/bottom\"\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  [key: string]: any\n}\n\nconst Homepage = ({ posts }: PostsProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <section sx={{ mb: [5, 6, 7], p: { fontSize: [1, 2, 3], mt: 2 }, variant: `section_hero` }}>\n        <Hero />\n      </section>\n      <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>Read all posts</Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n      <List sx={{ variant: `section_bottom` }}>\n        <Bottom />\n      </List>\n    </Layout>\n  )\n}\n\nexport default Homepage\n","import { graphql } from \"gatsby\"\nimport HomepageComponent from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport const query = graphql`\n  query($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Homepage from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"sourceRoot":""}